@using Microsoft.AspNet.Identity
@model List<SockChat.Models.MessageData>

@{
    ViewBag.Title = "Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Chat</h2>

@if (Request.IsAuthenticated)
{
    <div class="jumbotron">
        <div id="discussion">
            @foreach (var message in Model)
            {
                <div class="media">
                    <a class="pull-left" href="#">
                        <img class="media-object" src="..." alt="@message.Created">
                    </a>
                    <div class="media-body">
                        <h4 class="media-heading">@message.User.Email</h4>
                        @message.MessageText
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="input-group">
        <span class="input-group-addon"><span id="username">Placeholder</span></span>
        <input type="text" id="message" class="form-control" placeholder="type message here" />
        <button class="btn btn-default" type="button" id="sendmessage">Send</button>
    </div>
    <input type="hidden" id="displayname" />
    <script type="text/javascript">
        $(function () {
            // Declare a proxy to reference the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.broadcastMessage = function (name, message) {
                // Html encode display name and message.
                var encodedName = $('<div />').text(name).html();
                var encodedMsg = $('<div />').text(message).html();
                // Add the message to the page.
                $('#discussion').append('<div class="media"><a class="pull-left" href="#"><img class="media-object" src="..." alt="'
                    + Date() + '"></a><div class="media-body"><h4 class="media-heading">'
                    + encodedName
                    + '</h4>' + encodedMsg + '</div></div>');
                newExcitingAlerts();
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val('@User.Identity.GetUserName()');
            $('#username').text($('#displayname')[0].value);
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val(), '@ViewBag.ChatName');
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });


        });
                    //flash tab
            newExcitingAlerts = (function () {
                var oldTitle = document.title;
                var msg = "New!";
                var timeoutId;
                var blink = function () { document.title = document.title == msg ? ' ' : msg; };
                var clear = function () {
                    clearInterval(timeoutId);
                    document.title = oldTitle;
                    window.onmousemove = null;
                    timeoutId = null;
                };
                return function () {
                    if (!timeoutId) {
                        timeoutId = setInterval(blink, 1000);
                        window.onmousemove = clear;
                    }
                };
            }());
    </script>
}